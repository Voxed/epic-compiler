#ifndef PARSER_ABSYN_HEADER
#define PARSER_ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.
namespace parser
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Program;
class Def;
class Arg;
class Stm;
class Dec;
class Type;
class Exp;
class AddOp;
class MulOp;
class RelOp;
class Length;
class Struct;
class Field;
class Member;
class PDefs;
class DFun;
class ADecl;
class SEmpty;
class SBlock;
class SDecl;
class SAss;
class SIncr;
class SDecr;
class SRet;
class SVRet;
class SCond;
class SCondElse;
class SWhile;
class SExp;
class DecNoInit;
class DecInit;
class TInt;
class TDouble;
class TBool;
class TVoid;
class TStr;
class TFun;
class EVar;
class EApp;
class EInt;
class EDouble;
class ELitTrue;
class ELitFalse;
class EString;
class ENeg;
class ENot;
class EMul;
class EAdd;
class ERel;
class EAnd;
class EOr;
class ETyped;
class OPlus;
class OMinus;
class OTimes;
class ODiv;
class OMod;
class OLt;
class OLe;
class OGt;
class OGe;
class OEq;
class ONe;
class SForEach;
class TArray;
class EIndex;
class EAllocate;
class EDot;
class LLength;
class TIdent;
class TPointer;
class TStruct;
class DPointer;
class DStruct;
class DInlinePointer;
class SStruct;
class FField;
class ENull;
class EDeref;
class TClass;
class DClass;
class DSubclass;
class MField;
class MFun;
class ECast;
class ListDef;
class ListArg;
class ListStm;
class ListDec;
class ListType;
class ListExp;
class ListLength;
class ListField;
class ListMember;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitDef(Def *p) = 0;
  virtual void visitArg(Arg *p) = 0;
  virtual void visitStm(Stm *p) = 0;
  virtual void visitDec(Dec *p) = 0;
  virtual void visitType(Type *p) = 0;
  virtual void visitExp(Exp *p) = 0;
  virtual void visitAddOp(AddOp *p) = 0;
  virtual void visitMulOp(MulOp *p) = 0;
  virtual void visitRelOp(RelOp *p) = 0;
  virtual void visitLength(Length *p) = 0;
  virtual void visitStruct(Struct *p) = 0;
  virtual void visitField(Field *p) = 0;
  virtual void visitMember(Member *p) = 0;
  virtual void visitPDefs(PDefs *p) = 0;
  virtual void visitDFun(DFun *p) = 0;
  virtual void visitADecl(ADecl *p) = 0;
  virtual void visitSEmpty(SEmpty *p) = 0;
  virtual void visitSBlock(SBlock *p) = 0;
  virtual void visitSDecl(SDecl *p) = 0;
  virtual void visitSAss(SAss *p) = 0;
  virtual void visitSIncr(SIncr *p) = 0;
  virtual void visitSDecr(SDecr *p) = 0;
  virtual void visitSRet(SRet *p) = 0;
  virtual void visitSVRet(SVRet *p) = 0;
  virtual void visitSCond(SCond *p) = 0;
  virtual void visitSCondElse(SCondElse *p) = 0;
  virtual void visitSWhile(SWhile *p) = 0;
  virtual void visitSExp(SExp *p) = 0;
  virtual void visitDecNoInit(DecNoInit *p) = 0;
  virtual void visitDecInit(DecInit *p) = 0;
  virtual void visitTInt(TInt *p) = 0;
  virtual void visitTDouble(TDouble *p) = 0;
  virtual void visitTBool(TBool *p) = 0;
  virtual void visitTVoid(TVoid *p) = 0;
  virtual void visitTStr(TStr *p) = 0;
  virtual void visitTFun(TFun *p) = 0;
  virtual void visitEVar(EVar *p) = 0;
  virtual void visitEApp(EApp *p) = 0;
  virtual void visitEInt(EInt *p) = 0;
  virtual void visitEDouble(EDouble *p) = 0;
  virtual void visitELitTrue(ELitTrue *p) = 0;
  virtual void visitELitFalse(ELitFalse *p) = 0;
  virtual void visitEString(EString *p) = 0;
  virtual void visitENeg(ENeg *p) = 0;
  virtual void visitENot(ENot *p) = 0;
  virtual void visitEMul(EMul *p) = 0;
  virtual void visitEAdd(EAdd *p) = 0;
  virtual void visitERel(ERel *p) = 0;
  virtual void visitEAnd(EAnd *p) = 0;
  virtual void visitEOr(EOr *p) = 0;
  virtual void visitETyped(ETyped *p) = 0;
  virtual void visitOPlus(OPlus *p) = 0;
  virtual void visitOMinus(OMinus *p) = 0;
  virtual void visitOTimes(OTimes *p) = 0;
  virtual void visitODiv(ODiv *p) = 0;
  virtual void visitOMod(OMod *p) = 0;
  virtual void visitOLt(OLt *p) = 0;
  virtual void visitOLe(OLe *p) = 0;
  virtual void visitOGt(OGt *p) = 0;
  virtual void visitOGe(OGe *p) = 0;
  virtual void visitOEq(OEq *p) = 0;
  virtual void visitONe(ONe *p) = 0;
  virtual void visitSForEach(SForEach *p) = 0;
  virtual void visitTArray(TArray *p) = 0;
  virtual void visitEIndex(EIndex *p) = 0;
  virtual void visitEAllocate(EAllocate *p) = 0;
  virtual void visitEDot(EDot *p) = 0;
  virtual void visitLLength(LLength *p) = 0;
  virtual void visitTIdent(TIdent *p) = 0;
  virtual void visitTPointer(TPointer *p) = 0;
  virtual void visitTStruct(TStruct *p) = 0;
  virtual void visitDPointer(DPointer *p) = 0;
  virtual void visitDStruct(DStruct *p) = 0;
  virtual void visitDInlinePointer(DInlinePointer *p) = 0;
  virtual void visitSStruct(SStruct *p) = 0;
  virtual void visitFField(FField *p) = 0;
  virtual void visitENull(ENull *p) = 0;
  virtual void visitEDeref(EDeref *p) = 0;
  virtual void visitTClass(TClass *p) = 0;
  virtual void visitDClass(DClass *p) = 0;
  virtual void visitDSubclass(DSubclass *p) = 0;
  virtual void visitMField(MField *p) = 0;
  virtual void visitMFun(MFun *p) = 0;
  virtual void visitECast(ECast *p) = 0;
  virtual void visitListDef(ListDef *p) = 0;
  virtual void visitListArg(ListArg *p) = 0;
  virtual void visitListStm(ListStm *p) = 0;
  virtual void visitListDec(ListDec *p) = 0;
  virtual void visitListType(ListType *p) = 0;
  virtual void visitListExp(ListExp *p) = 0;
  virtual void visitListLength(ListLength *p) = 0;
  virtual void visitListField(ListField *p) = 0;
  virtual void visitListMember(ListMember *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;

};

class Def : public Visitable
{
public:
  virtual Def *clone() const = 0;

};

class Arg : public Visitable
{
public:
  virtual Arg *clone() const = 0;

};

class Stm : public Visitable
{
public:
  virtual Stm *clone() const = 0;

};

class Dec : public Visitable
{
public:
  virtual Dec *clone() const = 0;

};

class Type : public Visitable
{
public:
  virtual Type *clone() const = 0;

};

class Exp : public Visitable
{
public:
  virtual Exp *clone() const = 0;

};

class AddOp : public Visitable
{
public:
  virtual AddOp *clone() const = 0;

};

class MulOp : public Visitable
{
public:
  virtual MulOp *clone() const = 0;

};

class RelOp : public Visitable
{
public:
  virtual RelOp *clone() const = 0;

};

class Length : public Visitable
{
public:
  virtual Length *clone() const = 0;

};

class Struct : public Visitable
{
public:
  virtual Struct *clone() const = 0;

};

class Field : public Visitable
{
public:
  virtual Field *clone() const = 0;

};

class Member : public Visitable
{
public:
  virtual Member *clone() const = 0;

};



class PDefs : public Program
{
public:
  ListDef *listdef_;

  PDefs(const PDefs &);
  PDefs &operator=(const PDefs &);
  PDefs(ListDef *p1);
  ~PDefs();
  virtual void accept(Visitor *v);
  virtual PDefs *clone() const;
  void swap(PDefs &);
};

class DFun : public Def
{
public:
  Type *type_;
  Ident ident_;
  ListArg *listarg_;
  ListStm *liststm_;

  DFun(const DFun &);
  DFun &operator=(const DFun &);
  DFun(Type *p1, Ident p2, ListArg *p3, ListStm *p4);
  ~DFun();
  virtual void accept(Visitor *v);
  virtual DFun *clone() const;
  void swap(DFun &);
};

class DPointer : public Def
{
public:
  Ident ident_1;
  Ident ident_2;

  DPointer(const DPointer &);
  DPointer &operator=(const DPointer &);
  DPointer(Ident p1, Ident p2);
  ~DPointer();
  virtual void accept(Visitor *v);
  virtual DPointer *clone() const;
  void swap(DPointer &);
};

class DStruct : public Def
{
public:
  Struct *struct_;

  DStruct(const DStruct &);
  DStruct &operator=(const DStruct &);
  DStruct(Struct *p1);
  ~DStruct();
  virtual void accept(Visitor *v);
  virtual DStruct *clone() const;
  void swap(DStruct &);
};

class DInlinePointer : public Def
{
public:
  Struct *struct_;
  Ident ident_;

  DInlinePointer(const DInlinePointer &);
  DInlinePointer &operator=(const DInlinePointer &);
  DInlinePointer(Struct *p1, Ident p2);
  ~DInlinePointer();
  virtual void accept(Visitor *v);
  virtual DInlinePointer *clone() const;
  void swap(DInlinePointer &);
};

class DClass : public Def
{
public:
  Ident ident_;
  ListMember *listmember_;

  DClass(const DClass &);
  DClass &operator=(const DClass &);
  DClass(Ident p1, ListMember *p2);
  ~DClass();
  virtual void accept(Visitor *v);
  virtual DClass *clone() const;
  void swap(DClass &);
};

class DSubclass : public Def
{
public:
  Ident ident_1;
  Ident ident_2;
  ListMember *listmember_;

  DSubclass(const DSubclass &);
  DSubclass &operator=(const DSubclass &);
  DSubclass(Ident p1, Ident p2, ListMember *p3);
  ~DSubclass();
  virtual void accept(Visitor *v);
  virtual DSubclass *clone() const;
  void swap(DSubclass &);
};

class ADecl : public Arg
{
public:
  Type *type_;
  Ident ident_;

  ADecl(const ADecl &);
  ADecl &operator=(const ADecl &);
  ADecl(Type *p1, Ident p2);
  ~ADecl();
  virtual void accept(Visitor *v);
  virtual ADecl *clone() const;
  void swap(ADecl &);
};

class SEmpty : public Stm
{
public:

  SEmpty(const SEmpty &);
  SEmpty &operator=(const SEmpty &);
  SEmpty();
  ~SEmpty();
  virtual void accept(Visitor *v);
  virtual SEmpty *clone() const;
  void swap(SEmpty &);
};

class SBlock : public Stm
{
public:
  ListStm *liststm_;

  SBlock(const SBlock &);
  SBlock &operator=(const SBlock &);
  SBlock(ListStm *p1);
  ~SBlock();
  virtual void accept(Visitor *v);
  virtual SBlock *clone() const;
  void swap(SBlock &);
};

class SDecl : public Stm
{
public:
  Type *type_;
  ListDec *listdec_;

  SDecl(const SDecl &);
  SDecl &operator=(const SDecl &);
  SDecl(Type *p1, ListDec *p2);
  ~SDecl();
  virtual void accept(Visitor *v);
  virtual SDecl *clone() const;
  void swap(SDecl &);
};

class SAss : public Stm
{
public:
  Exp *exp_1;
  Exp *exp_2;

  SAss(const SAss &);
  SAss &operator=(const SAss &);
  SAss(Exp *p1, Exp *p2);
  ~SAss();
  virtual void accept(Visitor *v);
  virtual SAss *clone() const;
  void swap(SAss &);
};

class SIncr : public Stm
{
public:
  Exp *exp_;

  SIncr(const SIncr &);
  SIncr &operator=(const SIncr &);
  SIncr(Exp *p1);
  ~SIncr();
  virtual void accept(Visitor *v);
  virtual SIncr *clone() const;
  void swap(SIncr &);
};

class SDecr : public Stm
{
public:
  Exp *exp_;

  SDecr(const SDecr &);
  SDecr &operator=(const SDecr &);
  SDecr(Exp *p1);
  ~SDecr();
  virtual void accept(Visitor *v);
  virtual SDecr *clone() const;
  void swap(SDecr &);
};

class SRet : public Stm
{
public:
  Exp *exp_;

  SRet(const SRet &);
  SRet &operator=(const SRet &);
  SRet(Exp *p1);
  ~SRet();
  virtual void accept(Visitor *v);
  virtual SRet *clone() const;
  void swap(SRet &);
};

class SVRet : public Stm
{
public:

  SVRet(const SVRet &);
  SVRet &operator=(const SVRet &);
  SVRet();
  ~SVRet();
  virtual void accept(Visitor *v);
  virtual SVRet *clone() const;
  void swap(SVRet &);
};

class SCond : public Stm
{
public:
  Exp *exp_;
  Stm *stm_;

  SCond(const SCond &);
  SCond &operator=(const SCond &);
  SCond(Exp *p1, Stm *p2);
  ~SCond();
  virtual void accept(Visitor *v);
  virtual SCond *clone() const;
  void swap(SCond &);
};

class SCondElse : public Stm
{
public:
  Exp *exp_;
  Stm *stm_1;
  Stm *stm_2;

  SCondElse(const SCondElse &);
  SCondElse &operator=(const SCondElse &);
  SCondElse(Exp *p1, Stm *p2, Stm *p3);
  ~SCondElse();
  virtual void accept(Visitor *v);
  virtual SCondElse *clone() const;
  void swap(SCondElse &);
};

class SWhile : public Stm
{
public:
  Exp *exp_;
  Stm *stm_;

  SWhile(const SWhile &);
  SWhile &operator=(const SWhile &);
  SWhile(Exp *p1, Stm *p2);
  ~SWhile();
  virtual void accept(Visitor *v);
  virtual SWhile *clone() const;
  void swap(SWhile &);
};

class SExp : public Stm
{
public:
  Exp *exp_;

  SExp(const SExp &);
  SExp &operator=(const SExp &);
  SExp(Exp *p1);
  ~SExp();
  virtual void accept(Visitor *v);
  virtual SExp *clone() const;
  void swap(SExp &);
};

class SForEach : public Stm
{
public:
  Type *type_;
  Ident ident_;
  Exp *exp_;
  Stm *stm_;

  SForEach(const SForEach &);
  SForEach &operator=(const SForEach &);
  SForEach(Type *p1, Ident p2, Exp *p3, Stm *p4);
  ~SForEach();
  virtual void accept(Visitor *v);
  virtual SForEach *clone() const;
  void swap(SForEach &);
};

class DecNoInit : public Dec
{
public:
  Ident ident_;

  DecNoInit(const DecNoInit &);
  DecNoInit &operator=(const DecNoInit &);
  DecNoInit(Ident p1);
  ~DecNoInit();
  virtual void accept(Visitor *v);
  virtual DecNoInit *clone() const;
  void swap(DecNoInit &);
};

class DecInit : public Dec
{
public:
  Ident ident_;
  Exp *exp_;

  DecInit(const DecInit &);
  DecInit &operator=(const DecInit &);
  DecInit(Ident p1, Exp *p2);
  ~DecInit();
  virtual void accept(Visitor *v);
  virtual DecInit *clone() const;
  void swap(DecInit &);
};

class TInt : public Type
{
public:

  TInt(const TInt &);
  TInt &operator=(const TInt &);
  TInt();
  ~TInt();
  virtual void accept(Visitor *v);
  virtual TInt *clone() const;
  void swap(TInt &);
};

class TDouble : public Type
{
public:

  TDouble(const TDouble &);
  TDouble &operator=(const TDouble &);
  TDouble();
  ~TDouble();
  virtual void accept(Visitor *v);
  virtual TDouble *clone() const;
  void swap(TDouble &);
};

class TBool : public Type
{
public:

  TBool(const TBool &);
  TBool &operator=(const TBool &);
  TBool();
  ~TBool();
  virtual void accept(Visitor *v);
  virtual TBool *clone() const;
  void swap(TBool &);
};

class TVoid : public Type
{
public:

  TVoid(const TVoid &);
  TVoid &operator=(const TVoid &);
  TVoid();
  ~TVoid();
  virtual void accept(Visitor *v);
  virtual TVoid *clone() const;
  void swap(TVoid &);
};

class TStr : public Type
{
public:

  TStr(const TStr &);
  TStr &operator=(const TStr &);
  TStr();
  ~TStr();
  virtual void accept(Visitor *v);
  virtual TStr *clone() const;
  void swap(TStr &);
};

class TFun : public Type
{
public:
  Type *type_;
  ListType *listtype_;

  TFun(const TFun &);
  TFun &operator=(const TFun &);
  TFun(Type *p1, ListType *p2);
  ~TFun();
  virtual void accept(Visitor *v);
  virtual TFun *clone() const;
  void swap(TFun &);
};

class TArray : public Type
{
public:
  Type *type_;

  TArray(const TArray &);
  TArray &operator=(const TArray &);
  TArray(Type *p1);
  ~TArray();
  virtual void accept(Visitor *v);
  virtual TArray *clone() const;
  void swap(TArray &);
};

class TIdent : public Type
{
public:
  Ident ident_;

  TIdent(const TIdent &);
  TIdent &operator=(const TIdent &);
  TIdent(Ident p1);
  ~TIdent();
  virtual void accept(Visitor *v);
  virtual TIdent *clone() const;
  void swap(TIdent &);
};

class TPointer : public Type
{
public:
  Ident ident_;

  TPointer(const TPointer &);
  TPointer &operator=(const TPointer &);
  TPointer(Ident p1);
  ~TPointer();
  virtual void accept(Visitor *v);
  virtual TPointer *clone() const;
  void swap(TPointer &);
};

class TStruct : public Type
{
public:
  Ident ident_;

  TStruct(const TStruct &);
  TStruct &operator=(const TStruct &);
  TStruct(Ident p1);
  ~TStruct();
  virtual void accept(Visitor *v);
  virtual TStruct *clone() const;
  void swap(TStruct &);
};

class TClass : public Type
{
public:
  Ident ident_;

  TClass(const TClass &);
  TClass &operator=(const TClass &);
  TClass(Ident p1);
  ~TClass();
  virtual void accept(Visitor *v);
  virtual TClass *clone() const;
  void swap(TClass &);
};

class EVar : public Exp
{
public:
  Ident ident_;

  EVar(const EVar &);
  EVar &operator=(const EVar &);
  EVar(Ident p1);
  ~EVar();
  virtual void accept(Visitor *v);
  virtual EVar *clone() const;
  void swap(EVar &);
};

class EApp : public Exp
{
public:
  Ident ident_;
  ListExp *listexp_;

  EApp(const EApp &);
  EApp &operator=(const EApp &);
  EApp(Ident p1, ListExp *p2);
  ~EApp();
  virtual void accept(Visitor *v);
  virtual EApp *clone() const;
  void swap(EApp &);
};

class EInt : public Exp
{
public:
  Integer integer_;

  EInt(const EInt &);
  EInt &operator=(const EInt &);
  EInt(Integer p1);
  ~EInt();
  virtual void accept(Visitor *v);
  virtual EInt *clone() const;
  void swap(EInt &);
};

class EDouble : public Exp
{
public:
  Double double_;

  EDouble(const EDouble &);
  EDouble &operator=(const EDouble &);
  EDouble(Double p1);
  ~EDouble();
  virtual void accept(Visitor *v);
  virtual EDouble *clone() const;
  void swap(EDouble &);
};

class ELitTrue : public Exp
{
public:

  ELitTrue(const ELitTrue &);
  ELitTrue &operator=(const ELitTrue &);
  ELitTrue();
  ~ELitTrue();
  virtual void accept(Visitor *v);
  virtual ELitTrue *clone() const;
  void swap(ELitTrue &);
};

class ELitFalse : public Exp
{
public:

  ELitFalse(const ELitFalse &);
  ELitFalse &operator=(const ELitFalse &);
  ELitFalse();
  ~ELitFalse();
  virtual void accept(Visitor *v);
  virtual ELitFalse *clone() const;
  void swap(ELitFalse &);
};

class EString : public Exp
{
public:
  String string_;

  EString(const EString &);
  EString &operator=(const EString &);
  EString(String p1);
  ~EString();
  virtual void accept(Visitor *v);
  virtual EString *clone() const;
  void swap(EString &);
};

class ENeg : public Exp
{
public:
  Exp *exp_;

  ENeg(const ENeg &);
  ENeg &operator=(const ENeg &);
  ENeg(Exp *p1);
  ~ENeg();
  virtual void accept(Visitor *v);
  virtual ENeg *clone() const;
  void swap(ENeg &);
};

class ENot : public Exp
{
public:
  Exp *exp_;

  ENot(const ENot &);
  ENot &operator=(const ENot &);
  ENot(Exp *p1);
  ~ENot();
  virtual void accept(Visitor *v);
  virtual ENot *clone() const;
  void swap(ENot &);
};

class EMul : public Exp
{
public:
  Exp *exp_1;
  MulOp *mulop_;
  Exp *exp_2;

  EMul(const EMul &);
  EMul &operator=(const EMul &);
  EMul(Exp *p1, MulOp *p2, Exp *p3);
  ~EMul();
  virtual void accept(Visitor *v);
  virtual EMul *clone() const;
  void swap(EMul &);
};

class EAdd : public Exp
{
public:
  Exp *exp_1;
  AddOp *addop_;
  Exp *exp_2;

  EAdd(const EAdd &);
  EAdd &operator=(const EAdd &);
  EAdd(Exp *p1, AddOp *p2, Exp *p3);
  ~EAdd();
  virtual void accept(Visitor *v);
  virtual EAdd *clone() const;
  void swap(EAdd &);
};

class ERel : public Exp
{
public:
  Exp *exp_1;
  RelOp *relop_;
  Exp *exp_2;

  ERel(const ERel &);
  ERel &operator=(const ERel &);
  ERel(Exp *p1, RelOp *p2, Exp *p3);
  ~ERel();
  virtual void accept(Visitor *v);
  virtual ERel *clone() const;
  void swap(ERel &);
};

class EAnd : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EAnd(const EAnd &);
  EAnd &operator=(const EAnd &);
  EAnd(Exp *p1, Exp *p2);
  ~EAnd();
  virtual void accept(Visitor *v);
  virtual EAnd *clone() const;
  void swap(EAnd &);
};

class EOr : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EOr(const EOr &);
  EOr &operator=(const EOr &);
  EOr(Exp *p1, Exp *p2);
  ~EOr();
  virtual void accept(Visitor *v);
  virtual EOr *clone() const;
  void swap(EOr &);
};

class ETyped : public Exp
{
public:
  Exp *exp_;
  Type *type_;
  Char char_;

  ETyped(const ETyped &);
  ETyped &operator=(const ETyped &);
  ETyped(Exp *p1, Type *p2, Char p3);
  ~ETyped();
  virtual void accept(Visitor *v);
  virtual ETyped *clone() const;
  void swap(ETyped &);
};

class EIndex : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EIndex(const EIndex &);
  EIndex &operator=(const EIndex &);
  EIndex(Exp *p1, Exp *p2);
  ~EIndex();
  virtual void accept(Visitor *v);
  virtual EIndex *clone() const;
  void swap(EIndex &);
};

class EAllocate : public Exp
{
public:
  Type *type_;
  ListLength *listlength_;

  EAllocate(const EAllocate &);
  EAllocate &operator=(const EAllocate &);
  EAllocate(Type *p1, ListLength *p2);
  ~EAllocate();
  virtual void accept(Visitor *v);
  virtual EAllocate *clone() const;
  void swap(EAllocate &);
};

class EDot : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EDot(const EDot &);
  EDot &operator=(const EDot &);
  EDot(Exp *p1, Exp *p2);
  ~EDot();
  virtual void accept(Visitor *v);
  virtual EDot *clone() const;
  void swap(EDot &);
};

class ENull : public Exp
{
public:
  Type *type_;

  ENull(const ENull &);
  ENull &operator=(const ENull &);
  ENull(Type *p1);
  ~ENull();
  virtual void accept(Visitor *v);
  virtual ENull *clone() const;
  void swap(ENull &);
};

class EDeref : public Exp
{
public:
  Exp *exp_1;
  Exp *exp_2;

  EDeref(const EDeref &);
  EDeref &operator=(const EDeref &);
  EDeref(Exp *p1, Exp *p2);
  ~EDeref();
  virtual void accept(Visitor *v);
  virtual EDeref *clone() const;
  void swap(EDeref &);
};

class ECast : public Exp
{
public:
  Exp *exp_;
  Type *type_;

  ECast(const ECast &);
  ECast &operator=(const ECast &);
  ECast(Exp *p1, Type *p2);
  ~ECast();
  virtual void accept(Visitor *v);
  virtual ECast *clone() const;
  void swap(ECast &);
};

class OPlus : public AddOp
{
public:

  OPlus(const OPlus &);
  OPlus &operator=(const OPlus &);
  OPlus();
  ~OPlus();
  virtual void accept(Visitor *v);
  virtual OPlus *clone() const;
  void swap(OPlus &);
};

class OMinus : public AddOp
{
public:

  OMinus(const OMinus &);
  OMinus &operator=(const OMinus &);
  OMinus();
  ~OMinus();
  virtual void accept(Visitor *v);
  virtual OMinus *clone() const;
  void swap(OMinus &);
};

class OTimes : public MulOp
{
public:

  OTimes(const OTimes &);
  OTimes &operator=(const OTimes &);
  OTimes();
  ~OTimes();
  virtual void accept(Visitor *v);
  virtual OTimes *clone() const;
  void swap(OTimes &);
};

class ODiv : public MulOp
{
public:

  ODiv(const ODiv &);
  ODiv &operator=(const ODiv &);
  ODiv();
  ~ODiv();
  virtual void accept(Visitor *v);
  virtual ODiv *clone() const;
  void swap(ODiv &);
};

class OMod : public MulOp
{
public:

  OMod(const OMod &);
  OMod &operator=(const OMod &);
  OMod();
  ~OMod();
  virtual void accept(Visitor *v);
  virtual OMod *clone() const;
  void swap(OMod &);
};

class OLt : public RelOp
{
public:

  OLt(const OLt &);
  OLt &operator=(const OLt &);
  OLt();
  ~OLt();
  virtual void accept(Visitor *v);
  virtual OLt *clone() const;
  void swap(OLt &);
};

class OLe : public RelOp
{
public:

  OLe(const OLe &);
  OLe &operator=(const OLe &);
  OLe();
  ~OLe();
  virtual void accept(Visitor *v);
  virtual OLe *clone() const;
  void swap(OLe &);
};

class OGt : public RelOp
{
public:

  OGt(const OGt &);
  OGt &operator=(const OGt &);
  OGt();
  ~OGt();
  virtual void accept(Visitor *v);
  virtual OGt *clone() const;
  void swap(OGt &);
};

class OGe : public RelOp
{
public:

  OGe(const OGe &);
  OGe &operator=(const OGe &);
  OGe();
  ~OGe();
  virtual void accept(Visitor *v);
  virtual OGe *clone() const;
  void swap(OGe &);
};

class OEq : public RelOp
{
public:

  OEq(const OEq &);
  OEq &operator=(const OEq &);
  OEq();
  ~OEq();
  virtual void accept(Visitor *v);
  virtual OEq *clone() const;
  void swap(OEq &);
};

class ONe : public RelOp
{
public:

  ONe(const ONe &);
  ONe &operator=(const ONe &);
  ONe();
  ~ONe();
  virtual void accept(Visitor *v);
  virtual ONe *clone() const;
  void swap(ONe &);
};

class LLength : public Length
{
public:
  Exp *exp_;

  LLength(const LLength &);
  LLength &operator=(const LLength &);
  LLength(Exp *p1);
  ~LLength();
  virtual void accept(Visitor *v);
  virtual LLength *clone() const;
  void swap(LLength &);
};

class SStruct : public Struct
{
public:
  Ident ident_;
  ListField *listfield_;

  SStruct(const SStruct &);
  SStruct &operator=(const SStruct &);
  SStruct(Ident p1, ListField *p2);
  ~SStruct();
  virtual void accept(Visitor *v);
  virtual SStruct *clone() const;
  void swap(SStruct &);
};

class FField : public Field
{
public:
  Type *type_;
  Ident ident_;

  FField(const FField &);
  FField &operator=(const FField &);
  FField(Type *p1, Ident p2);
  ~FField();
  virtual void accept(Visitor *v);
  virtual FField *clone() const;
  void swap(FField &);
};

class MField : public Member
{
public:
  Field *field_;

  MField(const MField &);
  MField &operator=(const MField &);
  MField(Field *p1);
  ~MField();
  virtual void accept(Visitor *v);
  virtual MField *clone() const;
  void swap(MField &);
};

class MFun : public Member
{
public:
  Type *type_;
  Ident ident_;
  ListArg *listarg_;
  ListStm *liststm_;

  MFun(const MFun &);
  MFun &operator=(const MFun &);
  MFun(Type *p1, Ident p2, ListArg *p3, ListStm *p4);
  ~MFun();
  virtual void accept(Visitor *v);
  virtual MFun *clone() const;
  void swap(MFun &);
};



class ListDef : public Visitable, public std::vector<Def*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDef *clone() const;
};

class ListArg : public Visitable, public std::vector<Arg*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListArg *clone() const;
};

class ListStm : public Visitable, public std::vector<Stm*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStm *clone() const;
};

class ListDec : public Visitable, public std::vector<Dec*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDec *clone() const;
};

class ListType : public Visitable, public std::vector<Type*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListType *clone() const;
};

class ListExp : public Visitable, public std::vector<Exp*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExp *clone() const;
};

class ListLength : public Visitable, public std::vector<Length*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListLength *clone() const;
};

class ListField : public Visitable, public std::vector<Field*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListField *clone() const;
};

class ListMember : public Visitable, public std::vector<Member*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListMember *clone() const;
};


}
#endif
